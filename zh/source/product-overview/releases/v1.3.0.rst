.. raw:: latex

   \newpage

v1.3.0 发版说明
==================================

发布日期：2023-05-26

版本号：v1.3.0

HashData Lightning v1.3.0 是一个小版本，新增了若干特性，包含了产品性能/稳定性优化。

新功能
--------

HashData Lightning 在 v1.3.0 中引入了以下新特性：

.. list-table:: 功能分类
   :header-rows: 1
   :align: left

   * - 分类
     - 功能
     - 相关文档
   * - 查询处理
     - 支持将查询中的聚集运算下推至靠近数据源
     - :ref:`optimize-performance/push-down-agg-operators:下推聚集运算`
   * - 查询处理
     - 支持使用 Runtime Filter 对查询进行优化
     - :ref:`optimize-performance/optimize-hashjoin-query-performance:优化 hashjoin 查询性能`
   * - 查询处理
     - 支持对 Append-Optimized 表进行索引扫描
     - :ref:`optimize-performance/use-index-scan-on-ao-tables:在 ao 表上使用索引扫描`
   * - 集群管理
     - 支持 Kubernetes 容器化部署
     - :ref:`在 Kubernetes 上部署 HashData Lightning <deploy-guides/deploy-in-k8s:在 kubernetes 上部署>`
   * - 集群管理
     - 支持 Master 节点高可用
     - 
   * - 数据流
     - 支持在线创建索引
     - :ref:`optimize-performance/create-index-in-parallel:并发创建索引`
   * - 扩展
     - 支持基于 Elastic Search 的全文检索引擎
     - :ref:`components/zombodb:使用 zombodb 集成 elastic search`
   * - 安全
     - 支持数据加密组件 `pgcrypto`
     - :ref:`manage-system/set-security-and-permission/use-pgcrypto:使用 pgcrypto 加密数据`
   * - 安全
     - 支持 PasswordCheck 密码强度校验
     - :ref:`manage-system/set-security-and-permission/check-password-security:检查密码安全性`
   * - 安全
     - 支持数据脱敏校验
     - :ref:`manage-system/set-security-and-permission/use-anon:使用 anon 脱敏数据`


各个新特性的详细说明如下：

查询处理
~~~~~~~~~

-  支持将查询中的聚集运算下推至靠近数据源。

   对于带有连接和聚集运算的查询语句，该特性能显著提升这类查询语句的执行速度，某些情况能带来多个数量级的速度提升。

   要使用该特性，你需要先关闭 ORCA 优化器，并将 ``gp_enable_agg_pushdown`` 参数值设为 ``ON`` 。功能示例如下：

   .. code:: sql

      SET optimizer=off;
      SET gp_enable_agg_pushdown=on;

      CREATE TABLE t1(id INT, val1 INT);
      CREATE TABLE t2(id INT, val2 INT);

      EXPLAIN (costs off) SELECT id, SUM(val1) FROM t1 NATURAL JOIN t2 GROUP BY id;
                          QUERY PLAN
      -----------------------------------------------------
      Gather Motion 3:1  (slice1; segments: 3)
      ->  Finalize GroupAggregate
              Group Key: t1.id
              ->  Sort
                  Sort Key: t1.id
                  ->  Hash Join
                          Hash Cond: (t2.id = t1.id)
                          ->  Seq Scan on t2
                          ->  Hash
                              ->  Partial HashAggregate
                                      Group Key: t1.id
                                      ->  Seq Scan on t1
      Optimizer: Postgres query optimizer
      (13 rows)

   详情参见用户文档\ :ref:`optimize-performance/push-down-agg-operators:下推聚集运算`\ 。

-  支持 Runtime Filter。

   在执行大表连接查询的时候，SQL 优化器常选用 HashJoin 算子来进行运算。HashJoin 基于连接键构建哈希表来匹配连接键，这可能存在内存访问和磁盘瓶颈。RuntimeFilter 是在执行 HashJoin 运算时，实时产生过滤器 (Filter) 的优化技术，可以在执行 HashJoin 前预先对数据进行筛选，更快地执行 HashJoin。在某些场景下，通过 RuntimeFilter 优化能够使执行效率翻倍。

   该优化仅在 PostgreSQL 优化器中生效，因此开启前，你需要先关闭 ORCA 优化器，并手动开启 GUC 的参数 ``gp_enable_runtime_filter``\ 。

   .. code:: sql

      -- 准备工作
      SET optimizer TO off; -- 关闭 ORCA 优化器，使用 PostgreSQL 优化器
      SET gp_enable_runtime_filter TO on; -- 开启 RuntimeFilter 优化

      -- 创建表格
      DROP TABLE IF EXISTS fact, dim;
      CREATE TABLE fact (fid int, did int, val int);
      CREATE TABLE dim (did int, proj_id int, filter_val int);

      -- 生成测试数据，其中 fact.did 与 dim.did 有 80% 是重叠的
      INSERT INTO fact SELECT i, i % 8000 + 1, i FROM generate_series(1, 100000) s(i);
      INSERT INTO dim SELECT i, i % 10, i FROM generate_series(1, 10000) s(i);
      ANALYZE fact, dim;

      -- 查看执行计划
      EXPLAIN (COSTS OFF) SELECT COUNT(*) FROM fact, dim
          WHERE fact.did = dim.did AND proj_id < 2;
                                      QUERY PLAN
      ---------------------------------------------------------------------------
      Finalize Aggregate
      ->  Gather Motion 3:1  (slice1; segments: 3)
              ->  Partial Aggregate
                  ->  Hash Join
                          Hash Cond: (fact.did = dim.did)
                          ->  RuntimeFilter
                              ->  Seq Scan on fact
                          ->  Hash
                              ->  Broadcast Motion 3:3  (slice2; segments: 3)
                                      ->  Seq Scan on dim
                                          Filter: (proj_id < 2)
      Optimizer: Postgres query optimizer
      (12 rows)

   以上执行计划中出现了 ``RuntimeFilter`` 算子。如果要打印更多执行相关的信息，你可以使用 ``EXPLAIN ANALYZE``\ ：

   .. code:: sql

      ->  RuntimeFilter (actual time=0.047..5.976 rows=6682 loops=1)
          Bloom Bits: 1048576
          Extra Text: (seg1)   Inner Processed: 2000, Flase Positive Rate: 0.000000

   详情参见文档\ :ref:`optimize-performance/optimize-hashjoin-query-performance:优化 hashjoin 查询性能`\ 。

-  支持扫描 Append-Optimized 表索引

   自 v1.3.0 起，支持对 Append-Optimized 表（简称 AO 表）进行 IndexScan，以此来加速某些场景下的查询效率，例如以下查询：

   .. code:: sql

      SELECT * FROM tbl WHERE val > 100 ORDER BY val LIMIT 10;

   在 v1.3.0 前，HashData Lightning 扫描 AO 表仅支持 SeqScan 以及 BitmapScan 两种扫描方式。这是因为 HashData Lightning 会直接通过文件 I/O 来扫描 AO 表，然而磁盘随机 I/O 的效率远低于顺序 I/O。

   自 v1.3.0 起，HashData Lightning 支持使用 IndexScan 运算来扫描 AO 表，可大幅降低扫描的数据量，大大提升扫描的效率，是比 SeqScan 以及 BitmapScan 更好的扫描方式。而在 v1.3.0 前，SeqScan 或者 BitmapScan 比 IndexScan 多扫描 1 亿倍的数据量。

   要启用 AO IndexScan，你需要先通过 ``SET optimizer TO off;`` 关闭 ORCA 优化器，并将系统参数 ``gp_enable_ao_indexscan`` 设为 ``ON``\ 。

   详情参见用户文档\ :ref:`optimize-performance/use-index-scan-on-ao-tables:在 ao 表上使用索引扫描` \。

集群管理
~~~~~~~~~~

-  支持在 Kubernetes 上基于容器化引擎技术部署 HashData Lightning。

   你可以在 Kubernetes 上基于容器化引擎技术部署 HashData Lightning。在传统物理机上部署数据库，常常伴随着高昂的运维成本，同时高可用性和扩展性也是主要痛点。容器化部署方案可以很好地解决传统物理机部署的痛点。HashData Lightning 适配 Kubernetes 容器化部署，相较于物理机部署的数据库，容器化版本的云莓数据库独享以下特性：

   -  Master/Segment 节点无主从架构，通过 Kubernetes 容器服务实现各节点高可用功能。
   -  FTS 集群独立部署，用于维护数据库集群的元数据信息。
   -  ETCD 集群独立部署，用于存放数据库集群状态的元数据信息。
   -  Operator 集群独立部署，用于管理各个数据库节点的容器启停和故障恢复。
   -  通过共享存储挂载数据库节点的底层数据盘，通过共享存储多副本以保证数据可靠性，并支持数据异地灾备。

   详情参见文档\ :ref:`在 Kubernetes 上部署 HashData Lightning <deploy-guides/deploy-in-k8s:在 kubernetes 上部署>`\ 。

-  引入了 Master 节点高可用支持。

   在 v1.3.0 版本中，对 HashData Lightning 部署架构高可用部分进行了重新设计，大大提升了 Master 和 Standby 节点的可用性，解决了传统 Greenplum 物理机部署带来的运维痛点。传统的 Greenplum 物理机部署场景下，如果 Master 节点出现故障，需要人工介入才能恢复，并且等待时间长，故障恢复操作复杂。在新的部署架构设计中优化了数据库高可用功能，实现了数据库 Master 和 Standby 节点故障自动切换恢复，并增加了以下新的特性：

   -  引入了 FTS 独立部署的数据库服务节点。在新的部署架构下，故障检测恢复等高可用相关功能与 Master 节点其他功能解耦，并被拆分为可独立部署节点，支持数据库高可用功能服务，支持在物理机上通过混合方式部署。
   -  FTS 服务通过集群方式部署，由 ETCD 组件提供的分布式一致性锁机制保障 FTS 集群高可用性。FTS 集群为单一工作节点提供服务，其余节点均为热备节点。当 FTS 工作节点出现异常后可实现自动切换到热备节点，该机制用于保障任何数据库节点宕机或异常不会影响 FTS 高可用及数据库功能正常运行。
   -  引入 ETCD 服务组件，用于统一存放和维护数据库集群状态元数据信息，ETCD 集群由服务自身机制保障高可用性，任意节点宕机或异常都不会影响 ETCD 服务及数据库功能正常运行。

      .. note::

         在设计上，新的部署架构向前兼容 Greenplum 数据库架构和工具生态。你仍可以选择兼容传统 Greenplum 架构方式部署 HashData Lightning 。该兼容版本数据库的行为与传统 Greenplum 数据库行为保持一致，FTS 节点无需用户额外部署 ETCD 组件服务，但是 Master 和 Standby 节点不支持自动故障恢复功能。

      .. note::

         Master 节点故障自动切换功能基于 Master/Standby 节点间的 WAL 日志同步机制实现。如果日志同步处于异常状态，则 Master 节点不支持自动切换恢复。Master/Standby 日志正常同步完成后，会在 ETCD 服务中更新集群日志的同步状态，用于标识当前 Master 节点是否支持自动切换恢复的条件。

         -  在 Maser 节点宕机时，仅在检测到 ETCD 中保存的日志状态为同步时，Standby 节点才会被自动提升为新的 Master 节点，并自动恢复数据库系统。
         -  在 Master 节点宕机时，如果检测到 ETCD 中保存的日志状态为不同步时，Standby 节点不会被自动提升为新的 Master 节点。在该场景下 Master/Standby 节点自动切换会对数据库造成不可预估的影响，因此在这种场景下仍需要用户介入确认问题后，再手动方式切换恢复数据库系统。

数据流
~~~~~~~

-  支持在线创建或重建索引。

   之前的 HashData Lightning 版本中，创建索引和更新表数据是互斥的。也就是说创建索引时会对表加锁，这时候任何对表数据的增加、更新、删除操作都不会立即执行，而是等待索引创建完成后才会执行，因此会对在线业务产生很大的影响。自 v1.3.0 版本起，创建索引时，数据库不阻塞表数据的更新 。

   使用方法：\ ``CREATE INDEX CONCURRENTLY`` 和 ``REINDEX CONCURRENTLY``\ 。详情参见用户文档 :ref:`optimize-performance/create-index-in-parallel:并发创建索引`\ 。

扩展
~~~~~~

-  支持基于 Elastic Search 的全文检索引擎。

   用户通过创建索引的语法，即可在已有的 HashData Lightning 表上建立用于全文检索的索引。相比于数据库内置的 GIN 和 FTS 引擎，全文检索引擎可带来更佳的查询性能，并且支持丰富的全文检索功能。

   使用方法：

   1. 在环境中部署好 ElasticSearch 集群。
   2. 通过命令行 :literal:`gppkg -i zombodb-1.1-24716-release.gppkg`` 安装全文检索插件。

   详情参见文档\ :ref:`components/zombodb:使用 zombodb 集成 elastic search`\ 。

安全
~~~~~~

-  支持数据加密组件 ``pgcrypto``\ 。

   支持对用户数据进行加密解密，可支持加密算法如下：

   +----------------+----------------------------------------------------+
   | 算法类别       | 算法名称                                           |
   +================+====================================================+
   | 非对称加密算法 | - SM2（至少 256 bit）- RSA（至少 2048 bit）        |
   +----------------+----------------------------------------------------+
   | 对称算法       | - SM4（至少 128 bit）- 3DES（至少 128 bit）-       |
   |                | AES（至少 128 bit）                                |
   +----------------+----------------------------------------------------+
   | 散列算法       | - SM3- SHA2（计划替代                              |
   |                | SHA1，如果要在新开发系统中使用 SHA 算法，只能算则  |
   |                | SHA2 算法）- SHA1                                  |
   +----------------+----------------------------------------------------+

   使用方法：

   .. code:: sql

      CREATE extension pgcrypto;

      -- 散列类
      SELECT encode(digest('abc', 'sha1'), 'hex');
      SELECT encode(digest('abc', 'sha256'), 'hex');
      SELECT encode(digest('abc', 'sm3'), 'hex');

      -- 对称加密类
      SET bytea_output TO escape;
      select decrypt(encrypt('', 'foo', 'aes'), 'foo', 'aes');
      select decrypt(encrypt('', 'foo', 'sm4'), 'foo', 'sm4');

   详情参看文档\ :ref:`manage-system/set-security-and-permission/use-pgcrypto:使用 pgcrypto 加密数据`\ 。

-  引入了 PasswordCheck 密码强度校验支持。

   自 v1.3.0 起，用户通过 SQL 语句设置密码时，例如 ``CREATE USER ... PASSWORD`` 或 ``ALTER USER ... PASSWORD``\ ，HashData Lightning 会对密码进行安全性校验。主要会从以下几个方面做弱口令校验：

   -  密码长度必须大于 8 位。
   -  密码中不得包含用户名。
   -  密码中必须同时包含字母和非字母。

   要开启 PasswordCheck 插件，你需要在集群启动时，手动修改 Master 节点的 ``postgresql.conf`` 配置文件中的 ``shared_preload_libraries``
   配置项，并调用 ``gpconfig`` 命令来进行配置，如下所示：

   .. code:: bash

      gpconfig -c shared_preload_libraries -v 'passwordcheck'
      gpstop -ra

   配置完成后，每次设置密码时，PasswordCheck 都会对密码进行弱口令检查。

   详情参见文档\ :ref:`manage-system/set-security-and-permission/check-password-security:检查密码安全性`\ 。

-  支持数据脱敏组件。

   数据脱敏组件可以为 HashData Lightning 提供数据脱敏功能，从而起到防止敏感数据外泄的作用。数据脱敏又称数据漂白，是指将数据中的敏感信息去除，包括去除个人姓名、电话、住址、身份证号码等。用户可以指定脱敏规则，并将这些脱敏规则应用到指定的数据库对象上，从而实现数据脱敏。例如原始的电话号码为 0609110911，经过数据脱敏后变成了 06******11。

   使用方法：

   .. code:: bash

      # 安装组件
      gppkg -i anon-*.gppkg

      # 配置数据库启用脱敏
      psql postgres -c "ALTER DATABASE postgres SET session_preload_libraries = 'anon';"
      psql postgres -c "CREATE EXTENSION IF NOT EXISTS anon CASCADE"

      # 以下提示标识安装成功
      NOTICE:  installing required extension "pgcrypto"
      CREATE EXTENSION

   详情参见文档\ :ref:`manage-system/set-security-and-permission/use-anon:使用 anon 脱敏数据`\ 。

变更说明
----------

SQL 语法变更说明
~~~~~~~~~~~~~~~~~

无

功能变更说明
~~~~~~~~~~~~~

无

参数变更说明
~~~~~~~~~~~~~

-  新增参数 ``gp_enable_agg_pushdown``\ ，用于控制是否启用聚集下推优化，该优化只在关闭优化器的情况下生效。
