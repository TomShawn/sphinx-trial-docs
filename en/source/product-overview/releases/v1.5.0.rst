v1.5.0 发版说明
==================================

发布日期：2024-01-02

版本号：v1.5.0

.. note:: 自 v1.5.0 起，原 Cloudberry Database 更名为 HashData Lightning。除本文提及的变更说明外，Cloudberry Database v1.4.0 与 HashData Lightning v1.5.0 无其它兼容性差异。

HashData Lightning v1.5.0 新增了若干功能，包含了若干产品性能/稳定性优化，修复了若干错误 (bug)。

新功能
--------

.. list-table::
   :header-rows: 1
   :align: left

   * - 分类
     - 功能
     - 用户文档
   * - 查询处理
     - 支持并行创建 AO/AOCO 表和并行刷新物化视图
     - :ref:`optimize-performance/create-ao-aoco-tables-in-parallel-and-refresh-mtv:并行创建 ao/aoco 表与刷新物化视图`
   * - 查询处理
     - 支持自动使用物化视图进行查询优化
     - :ref:`optimize-performance/use-auto-mtv-for-query-optimization:使用自动物化视图进行查询优化`
   * - 查询处理
     - 升级向量化支持更多算子
     - :ref:`operate-with-data/advanced-data-analytics/vectorization-queries:vectorization 向量化查询计算`
   * - 集群管理
     - 支持图形化 SQL 编辑器
     - :ref:`operate-with-data/view-and-operate-db-objects-using-web-platform:在网页编辑器中执行 sql 语句`
   * - 集群管理
     - 支持部署单计算节点的集群
     - :ref:`deploy-guides/physical-deploy/manual-deploy/deploy-single-node:部署单计算节点`
   * - 集群管理
     - 支持使用命令行“一键”部署集群
     - `gpdemo 快捷部署使用文档 <https://hashdata.feishu.cn/docx/J7iOdL9kmoRKvDxrCD2cdE2znxh>`__
   * - 功能
     - 支持多字节分隔符
     - :ref:`load-data/customize-multi-char-delimiters:读写外部表时自定义多字符分隔符`
   * - 存储
     - 支持增量物化视图
     - :ref:`optimize-performance/use-incremental-mtv:使用增量物化视图`
   * - 存储
     - 支持在 AO 表上使用唯一索引
     - :ref:`optimize-performance/use-unique-index-on-ao-tables:在 AO 表上使用唯一索引`
   * - 扩展
     - 增强 pgvector 功能以支持索引
     - :ref:`pgvector 索引数据 <operate-with-data/advanced-data-analytics/pgvector-search:索引数据>`
   * - 扩展
     - ZomboDB 提供 HTTPS 版安装包以支持 SSL
     - :ref:`components/zombodb:使用 zombodb 集成 elastic search`
   * - 扩展
     - 支持从对象存储、Hadoop 平台加载数据
     - :ref:`load-data/load-data-from-oss-and-hdfs:从对象存储和 hdfs 加载数据`
   * - 扩展
     - 支持从 Hive 数据仓库加载数据
     - :ref:`load-data/load-data-from-hive:从 hive 数仓加载数据`
   * - 安全
     - 支持登录错误输入密码次数检查
     - :ref:`manage-system/set-security-and-permission/set-password-policy:配置密码策略`


各个新功能的详细说明如下：

查询处理
~~~~~~~~~~

-  **支持并行创建 AO/AOCO 表和并行刷新物化视图。**

   支持使用 ``CREATE TABLE AS`` 语句并行创建 Append-Optimized (AO) 表和 Append-Optimized Column Oriented (AOCO) 表，同时支持并行刷新基于该表的物化视图，从而加速建表和物化视图刷新。

   详情参见文档\ :ref:`optimize-performance/create-ao-aoco-tables-in-parallel-and-refresh-mtv:并行创建 ao/aoco 表与刷新物化视图`\ 。

-  **支持自动使用物化视图进行查询优化**，即在查询规划阶段自动使用物化视图来计算部分或全部查询 (AQUMV)。这一功能使用场景：

   -  大数据量的聚合查询：对于需要从数百万条记录中进行聚合的查询，AQUMV 能显著减少查询时间。
   -  频繁更新的大表：在数据频繁更新的环境中，使用 IMV 可以确保查询结果的实时性和准确性。

   详情参见文档\ :ref:`optimize-performance/use-auto-mtv-for-query-optimization:使用自动物化视图进行查询优化`\ 。

-  **提升向量化插件的可用性并支持更多算子**。

   向量化 (Vectorization) 执行引擎可以显著提升计算效率。通过将数据向量化，数据库可以同时处理多个数据元素，利用并行计算和 SIMD 指令集加速计算过程。HashData Lightning Vectorization（简称 Vectorization）是基于 HashData Lightning 内核的一个向量化插件，用于优化查询语句的性能。在 v1.5.0 版本中，提升了插件的可用性，并新支持了多种类型的算子。

   详情参见文档\ :ref:`operate-with-data/advanced-data-analytics/vectorization-queries:vectorization 向量化查询计算`\ 。

集群管理
~~~~~~~~~

-  **支持图形化 SQL 编辑器。**

   自 v1.5.0 起，用户可以在图形化界面平台 (HashData Lightning Web Platform) 中直接使用内置的 SQL 查询编辑器编写和执行 SQL 语句。在选择数据库后，你可以在编辑器中编写 SQL 语句，对输入的 SQL 语句进行格式化操作，并执行 SQL 语句。该编辑器支持内容搜索和字符串替换。

   详情参见文档\ :ref:`operate-with-data/view-and-operate-db-objects-using-web-platform:在网页编辑器中执行 sql 语句`\ 。

-  **支持以单计算节点部署集群。**

   在 v1.5.0 以前，用户部署一套 HashData Lightning（原 Cloudberry Database）集群时，至少需要部署一个 Coordinator 节点和一个 Segment 节点，还需要指定繁多的配置信息和启动参数，这一过程相对复杂耗时。

   从 v1.5.0 开始，用户可以像部署 PostgreSQL 一样部署单计算节点的 HashData Lightning 集群，集群仅包含一个 Coordinator 节点，无需指定繁多的配置参数，也无需预分配多个节点的计算资源。

   用户只需使用脚本工具 ``gpdemo`` 即可快速部署一套单节点的 HashData Lightning 集群。详情参见文档\ :ref:`deploy-guides/physical-deploy/manual-deploy/deploy-single-node:部署单计算节点`\ 。

-  **支持使用命令行工具“一键”部署集群。**

   在 v1.5.0 以前，如果用户想在单节点上部署带有 Segment 的小型集群用于演示，需要花费时间编写配置文件和参数。自 v1.5.0 起，用户只需要通过内置的 ``gpdemo`` 脚本，使用一条命令就能快速部署指定 Segment 数的 HashData Lightning 集群。即：

   .. code:: bash

      gpdemo

   详情参见文档 `gpdemo 快捷部署使用文档 <https://hashdata.feishu.cn/docx/J7iOdL9kmoRKvDxrCD2cdE2znxh>`__\ 。


-  **支持多字节分隔符**

   自 v1.5.0 版本起，在读写外表数据时，HashData Lightning 支持自定义分割字符（多字符），从而读写更加丰富的数据格式，例如使用 ``|@|`` 来做数据分隔符。

   详情参见文档\ :ref:`load-data/customize-multi-char-delimiters:读写外部表时自定义多字符分隔符`\ 。

存储
~~~~~~

-  **支持增量物化视图**

   增量物化视图是物化视图的一种特殊形式。当数据在基础表中发生变化时（例如插入、更新、删除操作），增量物化视图不需要重新计算整个视图中的所有数据。相反，它只更新那些自上次刷新以来发生变化的部分。这样可以节省大量的计算资源和时间，显著提高性能，尤其是在处理大型数据集时。

   自 v1.5.0 起，如果查询时有中间结果集需要加速，或者在读多写少的场景下，用户可以使用增量物化视图来加速查询，详情参见文档\ :ref:`optimize-performance/use-incremental-mtv:使用增量物化视图`\ 。

-  **在 AO 表上使用唯一索引**

   自 v1.5.0 起，你可以在 HashData Lightning 的 Append-Optimized (AO) 或 Append-Optimized Column Store (AOCS) 表上添加唯一索引。有了唯一索引，HashData Lightning 会在将数据插入到 AO 表时，强制检查唯一性约束，从而保证数据的唯一性，同时能够与优化器一起优化特定的查询，从而提高数据库的查询性能。但这也带来的一定的开销用于维护唯一索引，尤其是在插入数据时。

   详情参见文档\ :ref:`optimize-performance/use-unique-index-on-ao-tables:在 AO 表上使用唯一索引`\ 。

扩展
~~~~~~

-  **增强向量相似搜索插件 pgvector。**

   向量相似搜索插件 pgvector 可执行精确的最近邻搜索，提供较高的召回率。

   如果需要更高的召回率，你可以通过添加索引来使用近似最近邻搜索，不过这会降低一些性能。自 HashData Lightning v1.5.0 起，pgvector 支持添加 IVFFlat 和 HNSW 类型的索引。详情参见文档 :ref:`pgvector 索引数据 <operate-with-data/advanced-data-analytics/pgvector-search:索引数据>`。

-  **ZomboDB 支持 SSL。**

   ZomboDB 是 HashData Lightning 的一个插件，可以使 HashData Lightning 和 Elasticsearch 协同工作，让 HashData Lightning 拥有 Elasticsearch 丰富的全文检索和文本分析能力。

   自 v1.5.0 起，ZomboDB 提供 HTTPS 和 HTTP 两个版本的安装包，以支持 SSL，即 gppkg 包（HTTPS 版）、gppkg 包（HTTP 版）、RPM 包（HTTPS 版）、RPM 包（HTTP 版）。

   如果 Elasticsearch 集群配置了 HTTPS，那么安装 ZomboDB 时可选择 HTTPS 版本的安装包，详情参见文档\ :ref:`components/zombodb:使用 zombodb 集成 elastic search`\ 。

-  **支持从对象存储、Hadoop 平台加载数据**

   自 v1.5.0 起，你可以通过数据库扩展 ``datalake_fdw``，来将对象存储（例如 Amazon S3、青云、阿里云、华为云、腾讯云等）、HDFS 存储上的数据、作为外部数据加载到 HashData Lightning 中，以进行数据查询/访问。目前，支持加载的数据格式为 CSV、TEXT、ORC、PARQUET。

   详情参见文档\ :ref:`load-data/load-data-from-oss-and-hdfs:从对象存储和 hdfs 加载数据`\ 。

-  **支持从 Hive 数据仓库加载数据。**

   Hive 数据仓库建立在 Hadoop 集群的 HDFS 上，其数据仓库中的数据也保存在 HDFS 上。借助 HashData Lightning 提供的扩展 Hive Connector 和 ``datalake_fdw``，你可以将 Hive 集群中的表加载到 HashData Lightning 中。目前，支持加载 TEXT、CSV、ORC、PARQUET 格式的文件。

   注意，当前版本不支持从 Hive 数仓加载 Iceberg 和 Hudi 格式的数据到 HashData Lightning。

   但当前尚不支持同步 Hive External Table，也不支持同步 Hive Table 的统计信息。

   详情参见文档\ :ref:`load-data/load-data-from-hive:从 hive 数仓加载数据`\ 。

安全
~~~~~~

-  **支持创建和绑定数据库的用户密码策略配置。**

   Profile，即密码策略配置，用于控制数据库中用户的密码安全策略。Profile 定义了用户管理和重复使用密码的规则。通过配置 Profile，数据库管理员可以使用 SQL 语句强制添加一些约束，例如在一定次数的登录失败后锁定账户，或者控制密码重复使用次数。

   自 v1.5.0 起，HashData Lightning 支持通过 SQL 语句创建 Profile，并将 Profile 绑定到一个或多个用户中，从而控制数据库用户的密码安全策略。

   详情参见文档\ :ref:`manage-system/set-security-and-permission/set-password-policy:配置密码策略`\ 。

变更说明
---------

SQL 语法变更说明
~~~~~~~~~~~~~~~~~

``CREATE MATERIALIZED VIEW`` 新支持 ``INCREMENTAL`` 选项。你可以使用 SQL 命令 ``CREATE INCREMENTAL MATERIALIZED VIEW`` 来创建增量物化视图。完整的语法支持如下：

.. code:: sql

   CREATE [INCREMENTAL] MATERIALIZED VIEW [ IF NOT EXISTS ] table_name
       [ (column_name [, ...] ) ]
       [ USING method ]
       [ WITH ( storage_parameter [= value] [, ... ] ) ]
       [ TABLESPACE tablespace_name ]
       AS query
       [ WITH [ NO ] DATA ]

功能变更说明
~~~~~~~~~~~~~

无

参数变更说明
~~~~~~~~~~~~

无

Bug 修复
----------

-  修复了 AOCO 表内存越界的问题。该 Bug 导致的报错如下所示：

   .. code:: sql

      SET default_table_access_method=ao_column;
      CREATE temp TABLE nocolumns();

      SELECT EXISTS(SELECT * FROM nocolumns);

      WARNING:  detected write past chunk end in ExecutorState 0x8f79b78  (seg0 slice1 127.0.1.1:7002 pid=16215)

-  修复了使用 ``EXPLAIN`` 查看查询计划时，输出结果中的 ``operatorMem`` 对齐问题，修复前显示如下：

   .. code:: sql

      set gp_resqueue_print_operator_memory_limits=on;
      explain(costs off) select count(*) from test_hj_spill;
                                      QUERY PLAN
      ----------------------------------------------------------------------------
      Finalize AggregateoperatorMem: 100 kB

          ->  Gather Motion 3:1  (slice1; segments: 3)operatorMem: 100 kB

                      ->  Partial AggregateoperatorMem: 100 kB

                              ->  Seq Scan on test_hj_spilloperatorMem: 100 kB

-  修复了在特定条件下导致快照功能内存异常的问题，这个问题可能会在某些情况下使事务处理过程中发生 core dump。

-  改进了并行扫描操作时，并行哈希连接中内部表格大小的估算精度。

-  并行扫描时新增对 Semi HashJoin 类型的支持。

-  改进了 ``NOT IN`` 语句的处理逻辑，现在它可以正确地处理包含 ``NULL`` 值的情况。例如，在执行像 ``select c1 from t1_lasj where c1 not in (select c1n from t2_lasj_has_null where c1n is null or c1n is null)`` 这样的查询时，将得到正确的结果。

-  修复了在 macOS 上编译运行遇到的问题。

-  修复了 ``CREATE EXTENSION`` 时，用户的 ``search_path`` 发生变更的问题。

-  修复了使用向量化插件时出现的内存泄漏和溢出问题。

-  修复了使用向量化插件时，Segment 节点数较多导致 Motion 性能急剧下降的问题。
